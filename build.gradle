/*
 * Pulsar build file.
 */

//================================================
// Variables
def mod_version = gradle.ext.pulsar_mod_version
def mc_ver = gradle.ext.pulsar_mc_ver
def forge_ver = gradle.ext.pulsar_forge_ver
def flightpath_ver = gradle.ext.flightpath_ver

//================================================
// Pre-execute

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'Forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        // Sonatype (for SpecialSource in 1.7+)
        maven {
            name = "Sonatype Nexus"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven {
        name 'Forge'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'MinecraftS3'
        url 'http://s3.amazonaws.com/Minecraft.Download/libraries'
    }
    maven {
        name 'Tethys'
        url 'http://tethys.drakon.io/maven'
    }
}

apply plugin: 'forge'

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
  shade "io.drakon:flightpath:${flightpath_ver}"
}

// Fix an IDEA bug (via Abrar)
idea {
    module {
        inheritOutputDirs = true
    }
}

//================================================
// Jar data

group = "io.drakon"
version = mod_version
archivesBaseName = "pulsar"

//================================================
// Setup Forge plugin
minecraft {
    version = mc_ver + "-" + forge_ver

    srgExtra 'PK: io/drakon/flightpath io/drakon/pulsar/repack/flightpath'
}

//================================================
// Jar tasks

// Disable Javadoc doclint on JVM 1.8
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task sourceJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    manifest {
        attributes('Flightpath-Version': flightpath_ver)
    }
}

artifacts {
    archives sourceJar
    archives javadocJar
}

//================================================
// Maven deployment
apply plugin: 'maven'

if (!project.hasProperty("DEPLOY_DIR")) {
    ext.DEPLOY_DIR = null
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://${DEPLOY_DIR}")
        }
    }
}

uploadArchives.onlyIf { return DEPLOY_DIR != null }
